#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
The ARM architecture
\end_layout

\begin_layout Standard
ARM (Advanced Risc Machine) is a RISC processor architecture, developed
 by ARM holdings(Quoted from wikipedia).
 Unlike Intel, which develops the architecture as well as the silicon chip,
 ARM holdings onlu develops the architecture.
 It licences its architecture to various companies who manufacture and sell
 them.
 Some of the companies include Atmel, QualComm, Broadcom, Freescale etc.
 Companies like Qualcomm and Broadcomm make System on a Chip, SoC.
 The SoCs contain the main application processor along with the telephone
 modem and a digital signal processor.
\end_layout

\begin_layout Subsection*
Instruction set
\end_layout

\begin_layout Standard
Instruction sets is the language of the processor.
 ARM has evolved its instruction set from 
\emph on
armv1 
\emph default
to 
\emph on
armv7, 
\emph default
with 
\emph on
armv8 
\emph default
being developed now.The instruction sets are backward compatible but not
 forward compatible.
 
\emph on
armv6
\emph default
 code will work on 
\emph on
armv7
\emph default
 processor but the vice versa is not true.
 This will be one of the main issues when porting a code to an 
\emph on
armv6
\emph default
 platform which has been written for 
\emph on
armv7
\emph default
 platform.
 This will be the source for illegal instructions in the program.
 
\end_layout

\begin_layout Standard
Gecko, natively did not support armv6 instruction set.
 However, it supports it now.
 The JIT code may also cause some illegal instructions.
 Disabling it will make the code slow, but will solve the problem.
\end_layout

\begin_layout Subsection*
Floating point unit
\end_layout

\begin_layout Standard
Apart from the application processor, the SoCs will have a floating point
 unit.
 
\emph on
armv6
\emph default
 architecture is complimented with Vector Floating Point unit.
 
\emph on
armv7 
\emph default
on the other hand is complimented with NEON processor.
 They are not compatible with each other.
 The neon feature can be disabled when compiling gecko to make sure the
 code runs on non- NEON processors.
\end_layout

\end_body
\end_document
